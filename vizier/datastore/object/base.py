# Copyright (C) 2017-2019 New York University,
#                         University at Buffalo,
#                         Illinois Institute of Technology.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Vizier supports outputting things other than datasets.
This is the foundation to enable that.
"""

from vizier.core.util import is_scalar


PYTHON_EXPORT_TYPE = 'py-export'

class DataObjectDescriptor(object):
    """The descriptor maintains the dataobject  basic information
    including the dataobject identifier and object type.

    Attributes
    ----------
    key: string
         key/name of object
    identifier: string
        Unique identifier
    obj_type: string
        object type
    """
    def __init__(self, key, identifier, obj_type):
        """Initialize the dataset descriptor.

        Parameters
        ----------
        key: string
             key/name of object
        identifier: string
            Unique identifier
        obj_type: string
            object type
        """
        self.key = key
        self.identifier = identifier
        self.obj_type = obj_type

class DataObject(object):
    """DataObject is the base to handle outputs other than dataset
    for now it is key value pairs.

    Attributes
    ----------
    key: string
         key/name of object
    value: string
        Object value
    identifier: string
        Unique identifier
    obj_type: string
        object type
    """
    def __init__(self, key:str, value:str, identifier:str, obj_type:str):
        """Initialize the object components. Raises ValueError if both
        identifier are None.

        Parameters
        ----------
        key: string
            Object key
        value: string
            Object value
        identifier: string
            Object unique identifier
       
        """
        #if column_id is None and row_id is None:
        #    raise ValueError('invalid dataset resource identifier')
        self.key = key
        self.value = value
        self.identifier = identifier
        self.obj_type = obj_type

    def to_dict(self):
        """Get default dictionary serialization for the annotation object.

        Raises a ValueError if the object value is not a scalar value.

        Returns
        -------
        dict
        """
        if not is_scalar(self.value):
            raise ValueError('invalid annotation value')
        return {
            'key': self.key,
            'value': self.value,
            'identifier': self.identifier,
            'obj_type': self.obj_type
        }

    @staticmethod
    def from_dict(doc):
        """Create an object instance from a dictionary representation.

        Parameters
        ----------
        doc: dict
            Dictionary representation as generated by to_dict()

        Returns
        -------
        vizier.datastore.object.base.DataObject
        """
        return DataObject(
            key=doc['key'],
            value=doc['value'],
            identifier=doc['identifier'],
            obj_type=doc['obj_type']
        )
