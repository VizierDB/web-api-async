# Copyright (C) 2017-2019 New York University,
#                         University at Buffalo,
#                         Illinois Institute of Technology.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Vizier supports annotations for dataset columns, rows, and cells. Each
annotation is a key,value pair. Each annotation contains the identifier of the
particular resource that it is associated with.
"""

from vizier.core.util import is_scalar


class DatasetAnnotation(object):
    """Dataset annotations are key,value pairs. Each annotation is associated
    with one of the following dataset resource types: column, row, cell. The
    resource is identified by the combination of column id and row id. At least
    one of the two identifier has to be not None.

    Attributes
    ----------
    key: string
        Annotation key
    value: scalar
        Annotation value
    column_id: int, optional
        Unique column identifier
    row_id: int, optional
        Unique row identifier
    """
    def __init__(self, key, value, column_id=None, row_id=None):
        """Initialize the annotation components. Raises ValueError if both
        identifier are None.

        Parameters
        ----------
        key: string
            Annotation key
        value: string
            Annotation value
        column_id: int, optional
            Unique column identifier
        row_id: int, optional
            Unique row identifier
        """
        #if column_id is None and row_id is None:
        #    raise ValueError('invalid dataset resource identifier')
        self.key = key
        self.value = value
        self.column_id = column_id
        self.row_id = row_id

    def to_dict(self):
        """Get default dictionary serialization for the annotation object.

        Raises a ValueError if the annotation value is not a scalar value.

        Returns
        -------
        dict
        """
        if not is_scalar(self.value):
            raise ValueError('invalid annotation value')
        return {
            'key': self.key,
            'value': self.value,
            'columnId': self.column_id,
            'rowId': self.row_id
        }

    @staticmethod
    def from_dict(doc):
        """Create an annotation instance from a dictionary representation.

        Parameters
        ----------
        doc: dict
            Dictionary representation as generated by to_dict()

        Returns
        -------
        vizier.datastore.annotation.base.DatasetAnnotation
        """
        return DatasetAnnotation(
            key=doc['key'],
            value=doc['value'],
            column_id=doc['columnId'],
            row_id=doc['rowId']
        )
