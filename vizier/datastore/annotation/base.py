# Copyright (C) 2017-2019 New York University,
#                         University at Buffalo,
#                         Illinois Institute of Technology.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""
    Several Vizier datastores support annotating elements of the dataset with caveats, short
    human-readable descriptions of potential land-mines in the data.  Each caveat has a unique
    identifier and a message, and may optionally include a grouping identifier called a family.
"""
from typing import Dict, Any, Optional, List

class DatasetCaveat(object):
    """Dataset annotations are key,value pairs. Each annotation is associated
    with one of the following dataset resource types: column, row, cell. The
    resource is identified by the combination of column id and row id. At least
    one of the two identifier has to be not None.

    Attributes
    ----------
    key: list(scalar)
        Opaque, unique identifier for this caveat.  Used to obtain more detailed information.
    message: string
        The message describing this caveat
    family: scalar, optional
        Opaque grouping key, used to associate sets of caveats together
    """
    def __init__(self, 
            key: List[Any], 
            message: str, 
            family: Optional[str] = None
        ):
        """Initialize the annotation components. Raises ValueError if both
        identifier are None.

        Parameters
        ----------
        key: list(scalar)
            Opaque, unique identifier for this caveat.  Used to obtain more detailed information.
        message: string
            The message describing this caveat
        family: scalar
            Opaque grouping key, used to associate sets of caveats together
        """
        # if column_id is None and row_id is None:
        #    raise ValueError('invalid dataset resource identifier')
        self.key = key
        self.message = message
        self.family = family

    def __repr__(self):
        return "{}({}) = '{}'".format(
                self.family if self.family is None else "GENERIC_CAVEAT",
                ", ".join(self.key),
                self.message
            )

    def to_dict(self) -> Dict[str, Any]:
        """Get default dictionary serialization for the annotation object.

        Raises a ValueError if the annotation value is not a scalar value.

        Returns
        -------
        dict
        """
        return {
            'key': self.key,
            'message': self.message,
            'family': self.family
        }

    @staticmethod
    def from_dict(doc: Dict[str, Any]) -> "DatasetCaveat":
        """Create an annotation instance from a dictionary representation.

        Parameters
        ----------
        doc: dict
            Dictionary representation as generated by to_dict()

        Returns
        -------
        vizier.datastore.annotation.base.DatasetAnnotation
        """
        return DatasetCaveat(
            key=doc['key'],
            message=doc['message'],
            family=doc.get('family', None)
        )
